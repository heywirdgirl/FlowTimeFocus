'''
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Collection: users (document per userId)
    match /users/{userId} {
      // Only owner can read/write main document (UserProfile)
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Subcollection: privateCycles (Cycle[])
      match /privateCycles/{cycleId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Subcollection: trainingHistory (TrainingHistory[])
      match /trainingHistory/{historyId} {
        allow read, write: if request.auth != null && request.auth.uid == userId
          && (
            // Validation for create
            (resource == null && request.resource.data.keys().hasAll([
              'cycleId', 'name', 'startTime', 'endTime', 'totalDuration', 'cycleCount', 'completedAt'
            ]) 
            && request.resource.data.totalDuration is number 
            && request.resource.data.totalDuration > 0
            && request.resource.data.cycleCount is number 
            && request.resource.data.cycleCount >= 1)
            ||
            // Validation for update (allow changes but keep required fields)
            (resource != null && request.resource.data.keys().hasAll([
              'cycleId', 'name', 'startTime', 'endTime', 'totalDuration', 'cycleCount', 'completedAt'
            ]))
          );
      }
      
      // Subcollection: audioLibrary (AudioAsset[])
      match /audioLibrary/{assetId} {
        allow read, write: if request.auth != null && request.auth.uid == userId
          && (
            // Validation for create
            (resource == null && request.resource.data.keys().hasAll([
              'id', 'name', 'url', 'uploadedAt'
            ]) 
            && request.resource.data.url is string 
            && (request.resource.data.size is number || request.resource.data.size == null)
            && request.resource.data.size >= 0)
            ||
            // Validation for update
            (resource != null && request.resource.data.keys().hasAll([
              'id', 'name', 'url', 'uploadedAt'
            ]))
          );
      }
    }
    
    // Collection: cycleTemplates (CycleTemplate)
    match /cycleTemplates/{templateId} {
      // Read: Public if isPublic, or owner
      allow read: if resource.data.isPublic == true || 
                     (request.auth != null && request.auth.uid == resource.data.authorId);
      
      // Write: Only author or official, with validation
      allow create: if request.auth != null && 
                       (request.auth.uid == request.resource.data.authorId || 
                        request.auth.token.isOfficial == true)
        && request.resource.data.keys().hasAll([
          'id', 'name', 'description', 'phases', 'isPublic', 'authorId', 'authorName', 
          'likes', 'shares', 'createdAt', 'updatedAt'
        ]) 
        && request.resource.data.likes is number && request.resource.data.likes >= 0
        && request.resource.data.shares is number && request.resource.data.shares >= 0
        && request.resource.data.isPublic is bool;
      
      allow update, delete: if request.auth != null && 
                               (request.auth.uid == resource.data.authorId || 
                                request.auth.token.isOfficial == true)
        && request.resource.data.keys().hasAll([
          'id', 'name', 'description', 'phases', 'isPublic', 'authorId', 'authorName', 
          'likes', 'shares', 'createdAt', 'updatedAt'
        ]) 
        && request.resource.data.likes is number && request.resource.data.likes >= 0
        && request.resource.data.shares is number && request.resource.data.shares >= 0
        && request.resource.data.isPublic is bool;
    }
    
    // Collection: phaseTemplates (PhaseTemplate)
    match /phaseTemplates/{templateId} {
      // Read: Public if isPublic, or owner
      allow read: if resource.data.isPublic == true || 
                     (request.auth != null && request.auth.uid == resource.data.createdBy);
      
      // Write: Only creator or official, with validation
      allow create: if request.auth != null && 
                       (request.auth.uid == request.resource.data.createdBy || 
                        request.auth.token.isOfficial == true)
        && request.resource.data.keys().hasAll([
          'id', 'title', 'duration', 'description', 'soundFile', 'isPublic', 'createdBy', 'createdAt'
        ]) 
        && request.resource.data.duration is number && request.resource.data.duration > 0
        && request.resource.data.isPublic is bool;
      
      allow update, delete: if request.auth != null && 
                               (request.auth.uid == resource.data.createdBy || 
                                request.auth.token.isOfficial == true)
        && request.resource.data.keys().hasAll([
          'id', 'title', 'duration', 'description', 'soundFile', 'isPublic', 'createdBy', 'createdAt'
        ]) 
        && request.resource.data.duration is number && request.resource.data.duration > 0
        && request.resource.data.isPublic is bool;
    }
  }
}
'''